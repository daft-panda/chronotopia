// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file chronotopia.proto (package chronotopia, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message chronotopia.RequestParameters
 */
export class RequestParameters extends Message<RequestParameters> {
  /**
   * @generated from field: optional google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;

  /**
   * @generated from field: optional uint32 h3 = 3;
   */
  h3?: number;

  constructor(data?: PartialMessage<RequestParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.RequestParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "to", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "h3", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestParameters {
    return new RequestParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestParameters {
    return new RequestParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestParameters {
    return new RequestParameters().fromJsonString(jsonString, options);
  }

  static equals(a: RequestParameters | PlainMessage<RequestParameters> | undefined, b: RequestParameters | PlainMessage<RequestParameters> | undefined): boolean {
    return proto3.util.equals(RequestParameters, a, b);
  }
}

/**
 * @generated from message chronotopia.LatLon
 */
export class LatLon extends Message<LatLon> {
  /**
   * @generated from field: double lat = 1;
   */
  lat = 0;

  /**
   * @generated from field: double lon = 2;
   */
  lon = 0;

  constructor(data?: PartialMessage<LatLon>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.LatLon";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lat", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "lon", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LatLon {
    return new LatLon().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LatLon {
    return new LatLon().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LatLon {
    return new LatLon().fromJsonString(jsonString, options);
  }

  static equals(a: LatLon | PlainMessage<LatLon> | undefined, b: LatLon | PlainMessage<LatLon> | undefined): boolean {
    return proto3.util.equals(LatLon, a, b);
  }
}

/**
 * @generated from message chronotopia.Point
 */
export class Point extends Message<Point> {
  /**
   * @generated from field: chronotopia.LatLon latlon = 1;
   */
  latlon?: LatLon;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: optional string label = 4;
   */
  label?: string;

  /**
   * @generated from field: optional string note = 5;
   */
  note?: string;

  /**
   * @generated from field: optional float elevation = 6;
   */
  elevation?: number;

  constructor(data?: PartialMessage<Point>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.Point";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latlon", kind: "message", T: LatLon },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
    { no: 4, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "note", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "elevation", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Point {
    return new Point().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Point {
    return new Point().fromJsonString(jsonString, options);
  }

  static equals(a: Point | PlainMessage<Point> | undefined, b: Point | PlainMessage<Point> | undefined): boolean {
    return proto3.util.equals(Point, a, b);
  }
}

/**
 * @generated from message chronotopia.Trip
 */
export class Trip extends Message<Trip> {
  /**
   * @generated from field: repeated chronotopia.Point points = 1;
   */
  points: Point[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp stop = 3;
   */
  stop?: Timestamp;

  /**
   * @generated from field: optional string label = 10;
   */
  label?: string;

  constructor(data?: PartialMessage<Trip>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.Trip";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "points", kind: "message", T: Point, repeated: true },
    { no: 2, name: "start", kind: "message", T: Timestamp },
    { no: 3, name: "stop", kind: "message", T: Timestamp },
    { no: 10, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trip {
    return new Trip().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trip {
    return new Trip().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trip {
    return new Trip().fromJsonString(jsonString, options);
  }

  static equals(a: Trip | PlainMessage<Trip> | undefined, b: Trip | PlainMessage<Trip> | undefined): boolean {
    return proto3.util.equals(Trip, a, b);
  }
}

/**
 * @generated from message chronotopia.Trips
 */
export class Trips extends Message<Trips> {
  /**
   * @generated from field: repeated chronotopia.Trip trips = 1;
   */
  trips: Trip[] = [];

  constructor(data?: PartialMessage<Trips>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.Trips";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trips", kind: "message", T: Trip, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trips {
    return new Trips().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trips {
    return new Trips().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trips {
    return new Trips().fromJsonString(jsonString, options);
  }

  static equals(a: Trips | PlainMessage<Trips> | undefined, b: Trips | PlainMessage<Trips> | undefined): boolean {
    return proto3.util.equals(Trips, a, b);
  }
}

/**
 * @generated from message chronotopia.RoadSegment
 */
export class RoadSegment extends Message<RoadSegment> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: uint64 osm_way_id = 2;
   */
  osmWayId = protoInt64.zero;

  /**
   * @generated from field: repeated chronotopia.LatLon coordinates = 3;
   */
  coordinates: LatLon[] = [];

  /**
   * @generated from field: bool is_oneway = 4;
   */
  isOneway = false;

  /**
   * @generated from field: string highway_type = 5;
   */
  highwayType = "";

  /**
   * @generated from field: repeated uint64 connections = 6;
   */
  connections: bigint[] = [];

  /**
   * @generated from field: optional string name = 7;
   */
  name?: string;

  /**
   * @generated from field: optional uint32 interim_start_idx = 8;
   */
  interimStartIdx?: number;

  /**
   * @generated from field: optional uint32 interim_end_idx = 9;
   */
  interimEndIdx?: number;

  /**
   * Adding original full segment coordinates for reference
   *
   * @generated from field: repeated chronotopia.LatLon full_coordinates = 10;
   */
  fullCoordinates: LatLon[] = [];

  constructor(data?: PartialMessage<RoadSegment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.RoadSegment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "osm_way_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "coordinates", kind: "message", T: LatLon, repeated: true },
    { no: 4, name: "is_oneway", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "highway_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "connections", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "interim_start_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 9, name: "interim_end_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 10, name: "full_coordinates", kind: "message", T: LatLon, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoadSegment {
    return new RoadSegment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoadSegment {
    return new RoadSegment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoadSegment {
    return new RoadSegment().fromJsonString(jsonString, options);
  }

  static equals(a: RoadSegment | PlainMessage<RoadSegment> | undefined, b: RoadSegment | PlainMessage<RoadSegment> | undefined): boolean {
    return proto3.util.equals(RoadSegment, a, b);
  }
}

/**
 * @generated from message chronotopia.PointConstraint
 */
export class PointConstraint extends Message<PointConstraint> {
  /**
   * @generated from field: uint32 point_idx = 1;
   */
  pointIdx = 0;

  /**
   * @generated from field: uint64 segment_id = 2;
   */
  segmentId = protoInt64.zero;

  /**
   * @generated from field: uint64 way_id = 3;
   */
  wayId = protoInt64.zero;

  /**
   * @generated from field: double distance = 4;
   */
  distance = 0;

  constructor(data?: PartialMessage<PointConstraint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.PointConstraint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "segment_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "way_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "distance", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointConstraint {
    return new PointConstraint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointConstraint {
    return new PointConstraint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointConstraint {
    return new PointConstraint().fromJsonString(jsonString, options);
  }

  static equals(a: PointConstraint | PlainMessage<PointConstraint> | undefined, b: PointConstraint | PlainMessage<PointConstraint> | undefined): boolean {
    return proto3.util.equals(PointConstraint, a, b);
  }
}

/**
 * @generated from message chronotopia.WindowTrace
 */
export class WindowTrace extends Message<WindowTrace> {
  /**
   * @generated from field: uint32 start = 1;
   */
  start = 0;

  /**
   * @generated from field: uint32 end = 2;
   */
  end = 0;

  /**
   * @generated from field: repeated chronotopia.RoadSegment segments = 3;
   */
  segments: RoadSegment[] = [];

  /**
   * @generated from field: bool bridge = 4;
   */
  bridge = false;

  /**
   * @generated from field: repeated chronotopia.PointConstraint constraints = 5;
   */
  constraints: PointConstraint[] = [];

  /**
   * @generated from field: bool used_constraints = 6;
   */
  usedConstraints = false;

  /**
   * @generated from field: optional double constraint_score = 7;
   */
  constraintScore?: number;

  /**
   * @generated from field: optional double unconstrained_score = 8;
   */
  unconstrainedScore?: number;

  /**
   * @generated from field: repeated uint64 attempted_way_ids = 9;
   */
  attemptedWayIds: bigint[] = [];

  /**
   * @generated from field: repeated string debug_notes = 10;
   */
  debugNotes: string[] = [];

  constructor(data?: PartialMessage<WindowTrace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.WindowTrace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "end", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "segments", kind: "message", T: RoadSegment, repeated: true },
    { no: 4, name: "bridge", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "constraints", kind: "message", T: PointConstraint, repeated: true },
    { no: 6, name: "used_constraints", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "constraint_score", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 8, name: "unconstrained_score", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 9, name: "attempted_way_ids", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 10, name: "debug_notes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WindowTrace {
    return new WindowTrace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WindowTrace {
    return new WindowTrace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WindowTrace {
    return new WindowTrace().fromJsonString(jsonString, options);
  }

  static equals(a: WindowTrace | PlainMessage<WindowTrace> | undefined, b: WindowTrace | PlainMessage<WindowTrace> | undefined): boolean {
    return proto3.util.equals(WindowTrace, a, b);
  }
}

/**
 * @generated from message chronotopia.RouteMatchTrace
 */
export class RouteMatchTrace extends Message<RouteMatchTrace> {
  /**
   * @generated from field: chronotopia.Trip trip = 1;
   */
  trip?: Trip;

  /**
   * @generated from field: repeated chronotopia.WindowTrace windowTraces = 2;
   */
  windowTraces: WindowTrace[] = [];

  /**
   * @generated from field: repeated google.protobuf.StringValue pointCandidates = 3;
   */
  pointCandidates: StringValue[] = [];

  constructor(data?: PartialMessage<RouteMatchTrace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.RouteMatchTrace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trip", kind: "message", T: Trip },
    { no: 2, name: "windowTraces", kind: "message", T: WindowTrace, repeated: true },
    { no: 3, name: "pointCandidates", kind: "message", T: StringValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteMatchTrace {
    return new RouteMatchTrace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteMatchTrace {
    return new RouteMatchTrace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteMatchTrace {
    return new RouteMatchTrace().fromJsonString(jsonString, options);
  }

  static equals(a: RouteMatchTrace | PlainMessage<RouteMatchTrace> | undefined, b: RouteMatchTrace | PlainMessage<RouteMatchTrace> | undefined): boolean {
    return proto3.util.equals(RouteMatchTrace, a, b);
  }
}

/**
 * @generated from message chronotopia.WindowDebugRequest
 */
export class WindowDebugRequest extends Message<WindowDebugRequest> {
  /**
   * @generated from field: uint32 window_index = 1;
   */
  windowIndex = 0;

  /**
   * @generated from field: uint32 start_point = 2;
   */
  startPoint = 0;

  /**
   * @generated from field: uint32 end_point = 3;
   */
  endPoint = 0;

  /**
   * @generated from field: optional uint64 from_segment_id = 4;
   */
  fromSegmentId?: bigint;

  /**
   * @generated from field: optional uint64 to_segment_id = 5;
   */
  toSegmentId?: bigint;

  constructor(data?: PartialMessage<WindowDebugRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.WindowDebugRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "window_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "start_point", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "end_point", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "from_segment_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "to_segment_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WindowDebugRequest {
    return new WindowDebugRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WindowDebugRequest {
    return new WindowDebugRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WindowDebugRequest {
    return new WindowDebugRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WindowDebugRequest | PlainMessage<WindowDebugRequest> | undefined, b: WindowDebugRequest | PlainMessage<WindowDebugRequest> | undefined): boolean {
    return proto3.util.equals(WindowDebugRequest, a, b);
  }
}

/**
 * @generated from message chronotopia.ConnectivityRequest
 */
export class ConnectivityRequest extends Message<ConnectivityRequest> {
  /**
   * @generated from field: optional uint32 start_point_index = 1;
   */
  startPointIndex?: number;

  /**
   * @generated from field: optional uint32 end_point_index = 2;
   */
  endPointIndex?: number;

  /**
   * @generated from field: optional uint64 from_segment_id = 3;
   */
  fromSegmentId?: bigint;

  /**
   * @generated from field: optional uint64 to_segment_id = 4;
   */
  toSegmentId?: bigint;

  constructor(data?: PartialMessage<ConnectivityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.ConnectivityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_point_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "end_point_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "from_segment_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "to_segment_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectivityRequest {
    return new ConnectivityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectivityRequest {
    return new ConnectivityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectivityRequest {
    return new ConnectivityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectivityRequest | PlainMessage<ConnectivityRequest> | undefined, b: ConnectivityRequest | PlainMessage<ConnectivityRequest> | undefined): boolean {
    return proto3.util.equals(ConnectivityRequest, a, b);
  }
}

/**
 * @generated from message chronotopia.PathfindingDebugInfo
 */
export class PathfindingDebugInfo extends Message<PathfindingDebugInfo> {
  /**
   * @generated from field: uint32 start_point_idx = 1;
   */
  startPointIdx = 0;

  /**
   * @generated from field: uint32 end_point_idx = 2;
   */
  endPointIdx = 0;

  /**
   * @generated from field: repeated chronotopia.SegmentCandidate start_candidates = 3;
   */
  startCandidates: SegmentCandidate[] = [];

  /**
   * @generated from field: repeated chronotopia.SegmentCandidate end_candidates = 4;
   */
  endCandidates: SegmentCandidate[] = [];

  /**
   * @generated from field: repeated chronotopia.PointConstraintPair constraints = 5;
   */
  constraints: PointConstraintPair[] = [];

  /**
   * @generated from field: repeated chronotopia.PathfindingAttempt attempted_pairs = 6;
   */
  attemptedPairs: PathfindingAttempt[] = [];

  /**
   * @generated from field: map<uint32, uint32> constrained_candidates = 7;
   */
  constrainedCandidates: { [key: number]: number } = {};

  /**
   * @generated from field: string reason = 8;
   */
  reason = "";

  constructor(data?: PartialMessage<PathfindingDebugInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.PathfindingDebugInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_point_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "end_point_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "start_candidates", kind: "message", T: SegmentCandidate, repeated: true },
    { no: 4, name: "end_candidates", kind: "message", T: SegmentCandidate, repeated: true },
    { no: 5, name: "constraints", kind: "message", T: PointConstraintPair, repeated: true },
    { no: 6, name: "attempted_pairs", kind: "message", T: PathfindingAttempt, repeated: true },
    { no: 7, name: "constrained_candidates", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 8, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathfindingDebugInfo {
    return new PathfindingDebugInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathfindingDebugInfo {
    return new PathfindingDebugInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathfindingDebugInfo {
    return new PathfindingDebugInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PathfindingDebugInfo | PlainMessage<PathfindingDebugInfo> | undefined, b: PathfindingDebugInfo | PlainMessage<PathfindingDebugInfo> | undefined): boolean {
    return proto3.util.equals(PathfindingDebugInfo, a, b);
  }
}

/**
 * @generated from message chronotopia.SegmentCandidate
 */
export class SegmentCandidate extends Message<SegmentCandidate> {
  /**
   * @generated from field: chronotopia.RoadSegment segment = 1;
   */
  segment?: RoadSegment;

  /**
   * @generated from field: double distance = 2;
   */
  distance = 0;

  /**
   * @generated from field: chronotopia.Point projection = 3;
   */
  projection?: Point;

  /**
   * @generated from field: double score = 4;
   */
  score = 0;

  constructor(data?: PartialMessage<SegmentCandidate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.SegmentCandidate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "segment", kind: "message", T: RoadSegment },
    { no: 2, name: "distance", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "projection", kind: "message", T: Point },
    { no: 4, name: "score", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SegmentCandidate {
    return new SegmentCandidate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SegmentCandidate {
    return new SegmentCandidate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SegmentCandidate {
    return new SegmentCandidate().fromJsonString(jsonString, options);
  }

  static equals(a: SegmentCandidate | PlainMessage<SegmentCandidate> | undefined, b: SegmentCandidate | PlainMessage<SegmentCandidate> | undefined): boolean {
    return proto3.util.equals(SegmentCandidate, a, b);
  }
}

/**
 * @generated from message chronotopia.PointConstraintPair
 */
export class PointConstraintPair extends Message<PointConstraintPair> {
  /**
   * @generated from field: uint32 point_idx = 1;
   */
  pointIdx = 0;

  /**
   * @generated from field: uint64 segment_id = 2;
   */
  segmentId = protoInt64.zero;

  constructor(data?: PartialMessage<PointConstraintPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.PointConstraintPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "point_idx", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "segment_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PointConstraintPair {
    return new PointConstraintPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PointConstraintPair {
    return new PointConstraintPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PointConstraintPair {
    return new PointConstraintPair().fromJsonString(jsonString, options);
  }

  static equals(a: PointConstraintPair | PlainMessage<PointConstraintPair> | undefined, b: PointConstraintPair | PlainMessage<PointConstraintPair> | undefined): boolean {
    return proto3.util.equals(PointConstraintPair, a, b);
  }
}

/**
 * @generated from message chronotopia.PathfindingAttempt
 */
export class PathfindingAttempt extends Message<PathfindingAttempt> {
  /**
   * @generated from field: uint64 from_segment = 1;
   */
  fromSegment = protoInt64.zero;

  /**
   * @generated from field: uint64 from_osm_way = 2;
   */
  fromOsmWay = protoInt64.zero;

  /**
   * @generated from field: uint64 to_segment = 3;
   */
  toSegment = protoInt64.zero;

  /**
   * @generated from field: uint64 to_osm_way = 4;
   */
  toOsmWay = protoInt64.zero;

  /**
   * @generated from field: double distance = 5;
   */
  distance = 0;

  /**
   * @generated from field: chronotopia.PathfindingResult result = 6;
   */
  result?: PathfindingResult;

  constructor(data?: PartialMessage<PathfindingAttempt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.PathfindingAttempt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_segment", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "from_osm_way", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "to_segment", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "to_osm_way", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "distance", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "result", kind: "message", T: PathfindingResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathfindingAttempt {
    return new PathfindingAttempt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathfindingAttempt {
    return new PathfindingAttempt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathfindingAttempt {
    return new PathfindingAttempt().fromJsonString(jsonString, options);
  }

  static equals(a: PathfindingAttempt | PlainMessage<PathfindingAttempt> | undefined, b: PathfindingAttempt | PlainMessage<PathfindingAttempt> | undefined): boolean {
    return proto3.util.equals(PathfindingAttempt, a, b);
  }
}

/**
 * @generated from message chronotopia.PathfindingResult
 */
export class PathfindingResult extends Message<PathfindingResult> {
  /**
   * @generated from field: chronotopia.PathfindingResult.ResultType type = 1;
   */
  type = PathfindingResult_ResultType.SUCCESS;

  /**
   * @generated from field: repeated chronotopia.RoadSegment path = 2;
   */
  path: RoadSegment[] = [];

  /**
   * @generated from field: double cost = 3;
   */
  cost = 0;

  /**
   * @generated from field: double max_distance = 4;
   */
  maxDistance = 0;

  /**
   * @generated from field: double actual_distance = 5;
   */
  actualDistance = 0;

  /**
   * @generated from field: string reason = 6;
   */
  reason = "";

  constructor(data?: PartialMessage<PathfindingResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chronotopia.PathfindingResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PathfindingResult_ResultType) },
    { no: 2, name: "path", kind: "message", T: RoadSegment, repeated: true },
    { no: 3, name: "cost", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "max_distance", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "actual_distance", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PathfindingResult {
    return new PathfindingResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PathfindingResult {
    return new PathfindingResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PathfindingResult {
    return new PathfindingResult().fromJsonString(jsonString, options);
  }

  static equals(a: PathfindingResult | PlainMessage<PathfindingResult> | undefined, b: PathfindingResult | PlainMessage<PathfindingResult> | undefined): boolean {
    return proto3.util.equals(PathfindingResult, a, b);
  }
}

/**
 * @generated from enum chronotopia.PathfindingResult.ResultType
 */
export enum PathfindingResult_ResultType {
  /**
   * @generated from enum value: SUCCESS = 0;
   */
  SUCCESS = 0,

  /**
   * @generated from enum value: TOO_FAR = 1;
   */
  TOO_FAR = 1,

  /**
   * @generated from enum value: NO_CONNECTION = 2;
   */
  NO_CONNECTION = 2,

  /**
   * @generated from enum value: NO_PATH_FOUND = 3;
   */
  NO_PATH_FOUND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PathfindingResult_ResultType)
proto3.util.setEnumType(PathfindingResult_ResultType, "chronotopia.PathfindingResult.ResultType", [
  { no: 0, name: "SUCCESS" },
  { no: 1, name: "TOO_FAR" },
  { no: 2, name: "NO_CONNECTION" },
  { no: 3, name: "NO_PATH_FOUND" },
]);

