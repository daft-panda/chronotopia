// @generated by protoc-gen-connect-es v1.5.0 with parameter "target=ts"
// @generated from file user_management.proto (package chronotopia, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ChangePasswordRequest, CreateUserRequest, ListUsersRequest, RequestPasswordResetRequest, ResetPasswordRequest, UpdateUserRequest, User, UserRequest, Users, ValidateTokenRequest } from "./user_management_pb.js";
import { BoolValue, Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service chronotopia.UserManagement
 */
export const UserManagement = {
  typeName: "chronotopia.UserManagement",
  methods: {
    /**
     * Create a new user
     *
     * @generated from rpc chronotopia.UserManagement.CreateUser
     */
    createUser: {
      name: "CreateUser",
      I: CreateUserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Get a specific user by ID
     *
     * @generated from rpc chronotopia.UserManagement.GetUser
     */
    getUser: {
      name: "GetUser",
      I: UserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Get all users (with optional filtering)
     *
     * @generated from rpc chronotopia.UserManagement.ListUsers
     */
    listUsers: {
      name: "ListUsers",
      I: ListUsersRequest,
      O: Users,
      kind: MethodKind.Unary,
    },
    /**
     * Update user details
     *
     * @generated from rpc chronotopia.UserManagement.UpdateUser
     */
    updateUser: {
      name: "UpdateUser",
      I: UpdateUserRequest,
      O: User,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a user
     *
     * @generated from rpc chronotopia.UserManagement.DeleteUser
     */
    deleteUser: {
      name: "DeleteUser",
      I: UserRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Change password (requires old password)
     *
     * @generated from rpc chronotopia.UserManagement.ChangePassword
     */
    changePassword: {
      name: "ChangePassword",
      I: ChangePasswordRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Reset password (admin or via token)
     *
     * @generated from rpc chronotopia.UserManagement.ResetPassword
     */
    resetPassword: {
      name: "ResetPassword",
      I: ResetPasswordRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Request password reset (sends email with token)
     *
     * @generated from rpc chronotopia.UserManagement.RequestPasswordReset
     */
    requestPasswordReset: {
      name: "RequestPasswordReset",
      I: RequestPasswordResetRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Validate a reset token (before setting a new password)
     *
     * @generated from rpc chronotopia.UserManagement.ValidateResetToken
     */
    validateResetToken: {
      name: "ValidateResetToken",
      I: ValidateTokenRequest,
      O: BoolValue,
      kind: MethodKind.Unary,
    },
  }
} as const;

