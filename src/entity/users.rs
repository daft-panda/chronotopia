//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use super::sea_orm_active_enums::UserStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub first_name: String,
    pub last_name: String,
    pub user_name: Option<String>,
    pub email: String,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub password: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub salt: Vec<u8>,
    pub date_created: DateTimeWithTimeZone,
    pub last_modified: DateTimeWithTimeZone,
    pub status: UserStatus,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::device_metadata::Entity")]
    DeviceMetadata,
    #[sea_orm(has_many = "super::import_summary::Entity")]
    ImportSummary,
    #[sea_orm(has_many = "super::ingest_batches::Entity")]
    IngestBatches,
    #[sea_orm(has_many = "super::trips::Entity")]
    Trips,
    #[sea_orm(has_one = "super::user_processing_state::Entity")]
    UserProcessingState,
}

impl Related<super::device_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DeviceMetadata.def()
    }
}

impl Related<super::import_summary::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ImportSummary.def()
    }
}

impl Related<super::ingest_batches::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IngestBatches.def()
    }
}

impl Related<super::trips::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trips.def()
    }
}

impl Related<super::user_processing_state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserProcessingState.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
