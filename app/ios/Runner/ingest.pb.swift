// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ingest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Chronotopia_IngestBatch: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DateTime when the packet was created
  var dateTime: Chronotopia_DateTime {
    get {return _storage._dateTime ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  var hasDateTime: Bool {return _storage._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  mutating func clearDateTime() {_uniqueStorage()._dateTime = nil}

  /// Batch of location points
  var locations: [Chronotopia_LocationPoint] {
    get {return _storage._locations}
    set {_uniqueStorage()._locations = newValue}
  }

  /// Batch of activity events
  var activities: [Chronotopia_ActivityEvent] {
    get {return _storage._activities}
    set {_uniqueStorage()._activities = newValue}
  }

  /// Batch of visit events
  var visits: [Chronotopia_VisitEvent] {
    get {return _storage._visits}
    set {_uniqueStorage()._visits = newValue}
  }

  /// Device metadata
  var deviceMetadata: Chronotopia_DeviceMetadata {
    get {return _storage._deviceMetadata ?? Chronotopia_DeviceMetadata()}
    set {_uniqueStorage()._deviceMetadata = newValue}
  }
  /// Returns true if `deviceMetadata` has been explicitly set.
  var hasDeviceMetadata: Bool {return _storage._deviceMetadata != nil}
  /// Clears the value of `deviceMetadata`. Subsequent reads from it will return its default value.
  mutating func clearDeviceMetadata() {_uniqueStorage()._deviceMetadata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Location point data
struct Chronotopia_LocationPoint: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic coordinates
  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var altitude: Double {
    get {return _storage._altitude}
    set {_uniqueStorage()._altitude = newValue}
  }

  /// Accuracy information
  var horizontalAccuracy: Double {
    get {return _storage._horizontalAccuracy}
    set {_uniqueStorage()._horizontalAccuracy = newValue}
  }

  var verticalAccuracy: Double {
    get {return _storage._verticalAccuracy}
    set {_uniqueStorage()._verticalAccuracy = newValue}
  }

  var speedAccuracy: Double {
    get {return _storage._speedAccuracy}
    set {_uniqueStorage()._speedAccuracy = newValue}
  }

  var bearingAccuracy: Double {
    get {return _storage._bearingAccuracy}
    set {_uniqueStorage()._bearingAccuracy = newValue}
  }

  /// Motion information
  var speed: Double {
    get {return _storage._speed}
    set {_uniqueStorage()._speed = newValue}
  }

  var bearing: Double {
    get {return _storage._bearing}
    set {_uniqueStorage()._bearing = newValue}
  }

  /// Timestamps
  var dateTime: Chronotopia_DateTime {
    get {return _storage._dateTime ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  var hasDateTime: Bool {return _storage._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  mutating func clearDateTime() {_uniqueStorage()._dateTime = nil}

  /// Location provider information
  var provider: String {
    get {return _storage._provider}
    set {_uniqueStorage()._provider = newValue}
  }

  var isMockLocation: Bool {
    get {return _storage._isMockLocation}
    set {_uniqueStorage()._isMockLocation = newValue}
  }

  /// For indoor positioning (iOS)
  var floorLevel: Int32 {
    get {return _storage._floorLevel}
    set {_uniqueStorage()._floorLevel = newValue}
  }

  /// Device state information
  var batteryLevel: Int32 {
    get {return _storage._batteryLevel}
    set {_uniqueStorage()._batteryLevel = newValue}
  }

  var networkType: String {
    get {return _storage._networkType}
    set {_uniqueStorage()._networkType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Activity recognition event
struct Chronotopia_ActivityEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Chronotopia_ActivityEvent.ActivityType = .unknown

  /// 0-100
  var confidence: Int32 = 0

  /// Timestamps
  var timestamp: Int64 = 0

  var startTime: Int64 = 0

  var endTime: Int64 = 0

  /// Movement data
  var stepCount: Int64 = 0

  var distance: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ActivityType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case still // = 1
    case walking // = 2
    case running // = 3
    case inVehicle // = 4
    case onBicycle // = 5
    case onFoot // = 6
    case tilting // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .still
      case 2: self = .walking
      case 3: self = .running
      case 4: self = .inVehicle
      case 5: self = .onBicycle
      case 6: self = .onFoot
      case 7: self = .tilting
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .still: return 1
      case .walking: return 2
      case .running: return 3
      case .inVehicle: return 4
      case .onBicycle: return 5
      case .onFoot: return 6
      case .tilting: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Chronotopia_ActivityEvent.ActivityType] = [
      .unknown,
      .still,
      .walking,
      .running,
      .inVehicle,
      .onBicycle,
      .onFoot,
      .tilting,
    ]

  }

  init() {}
}

/// Visit events (iOS-specific but we'll handle on Android too)
struct Chronotopia_VisitEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitude: Double = 0

  var longitude: Double = 0

  var horizontalAccuracy: Double = 0

  var arrivalTime: Int64 = 0

  var departureTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Device metadata
struct Chronotopia_DeviceMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// "android" or "ios"
  var platform: String = String()

  var osVersion: String = String()

  var appVersion: String = String()

  var deviceModel: String = String()

  var deviceLanguage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Response to data uploads
struct Chronotopia_IngestResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var alertMessage: String = String()

  /// Optional fields for server instructions
  var pauseTracking: Bool = false

  /// in seconds
  var recommendedUploadInterval: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "chronotopia"

extension Chronotopia_IngestBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngestBatch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "dateTime"),
    4: .same(proto: "locations"),
    5: .same(proto: "activities"),
    6: .same(proto: "visits"),
    7: .standard(proto: "device_metadata"),
  ]

  fileprivate class _StorageClass {
    var _dateTime: Chronotopia_DateTime? = nil
    var _locations: [Chronotopia_LocationPoint] = []
    var _activities: [Chronotopia_ActivityEvent] = []
    var _visits: [Chronotopia_VisitEvent] = []
    var _deviceMetadata: Chronotopia_DeviceMetadata? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _dateTime = source._dateTime
      _locations = source._locations
      _activities = source._activities
      _visits = source._visits
      _deviceMetadata = source._deviceMetadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._dateTime) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._locations) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._activities) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._visits) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._deviceMetadata) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._dateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._locations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._locations, fieldNumber: 4)
      }
      if !_storage._activities.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activities, fieldNumber: 5)
      }
      if !_storage._visits.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._visits, fieldNumber: 6)
      }
      try { if let v = _storage._deviceMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_IngestBatch, rhs: Chronotopia_IngestBatch) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._dateTime != rhs_storage._dateTime {return false}
        if _storage._locations != rhs_storage._locations {return false}
        if _storage._activities != rhs_storage._activities {return false}
        if _storage._visits != rhs_storage._visits {return false}
        if _storage._deviceMetadata != rhs_storage._deviceMetadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_LocationPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocationPoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .same(proto: "altitude"),
    4: .standard(proto: "horizontal_accuracy"),
    5: .standard(proto: "vertical_accuracy"),
    6: .standard(proto: "speed_accuracy"),
    7: .standard(proto: "bearing_accuracy"),
    8: .same(proto: "speed"),
    9: .same(proto: "bearing"),
    10: .same(proto: "dateTime"),
    11: .same(proto: "provider"),
    12: .standard(proto: "is_mock_location"),
    13: .standard(proto: "floor_level"),
    14: .standard(proto: "battery_level"),
    15: .standard(proto: "network_type"),
  ]

  fileprivate class _StorageClass {
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _altitude: Double = 0
    var _horizontalAccuracy: Double = 0
    var _verticalAccuracy: Double = 0
    var _speedAccuracy: Double = 0
    var _bearingAccuracy: Double = 0
    var _speed: Double = 0
    var _bearing: Double = 0
    var _dateTime: Chronotopia_DateTime? = nil
    var _provider: String = String()
    var _isMockLocation: Bool = false
    var _floorLevel: Int32 = 0
    var _batteryLevel: Int32 = 0
    var _networkType: String = String()

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _latitude = source._latitude
      _longitude = source._longitude
      _altitude = source._altitude
      _horizontalAccuracy = source._horizontalAccuracy
      _verticalAccuracy = source._verticalAccuracy
      _speedAccuracy = source._speedAccuracy
      _bearingAccuracy = source._bearingAccuracy
      _speed = source._speed
      _bearing = source._bearing
      _dateTime = source._dateTime
      _provider = source._provider
      _isMockLocation = source._isMockLocation
      _floorLevel = source._floorLevel
      _batteryLevel = source._batteryLevel
      _networkType = source._networkType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._latitude) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._longitude) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._altitude) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._horizontalAccuracy) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._verticalAccuracy) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._speedAccuracy) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._bearingAccuracy) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._speed) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._bearing) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dateTime) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._provider) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._isMockLocation) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._floorLevel) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._batteryLevel) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._networkType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._latitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 1)
      }
      if _storage._longitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 2)
      }
      if _storage._altitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._altitude, fieldNumber: 3)
      }
      if _storage._horizontalAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._horizontalAccuracy, fieldNumber: 4)
      }
      if _storage._verticalAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._verticalAccuracy, fieldNumber: 5)
      }
      if _storage._speedAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._speedAccuracy, fieldNumber: 6)
      }
      if _storage._bearingAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearingAccuracy, fieldNumber: 7)
      }
      if _storage._speed.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._speed, fieldNumber: 8)
      }
      if _storage._bearing.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearing, fieldNumber: 9)
      }
      try { if let v = _storage._dateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._provider.isEmpty {
        try visitor.visitSingularStringField(value: _storage._provider, fieldNumber: 11)
      }
      if _storage._isMockLocation != false {
        try visitor.visitSingularBoolField(value: _storage._isMockLocation, fieldNumber: 12)
      }
      if _storage._floorLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._floorLevel, fieldNumber: 13)
      }
      if _storage._batteryLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._batteryLevel, fieldNumber: 14)
      }
      if !_storage._networkType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._networkType, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_LocationPoint, rhs: Chronotopia_LocationPoint) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._altitude != rhs_storage._altitude {return false}
        if _storage._horizontalAccuracy != rhs_storage._horizontalAccuracy {return false}
        if _storage._verticalAccuracy != rhs_storage._verticalAccuracy {return false}
        if _storage._speedAccuracy != rhs_storage._speedAccuracy {return false}
        if _storage._bearingAccuracy != rhs_storage._bearingAccuracy {return false}
        if _storage._speed != rhs_storage._speed {return false}
        if _storage._bearing != rhs_storage._bearing {return false}
        if _storage._dateTime != rhs_storage._dateTime {return false}
        if _storage._provider != rhs_storage._provider {return false}
        if _storage._isMockLocation != rhs_storage._isMockLocation {return false}
        if _storage._floorLevel != rhs_storage._floorLevel {return false}
        if _storage._batteryLevel != rhs_storage._batteryLevel {return false}
        if _storage._networkType != rhs_storage._networkType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_ActivityEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivityEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "confidence"),
    3: .same(proto: "timestamp"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
    6: .standard(proto: "step_count"),
    7: .same(proto: "distance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.confidence) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.startTime) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.endTime) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.stepCount) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.distance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularInt32Field(value: self.confidence, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt64Field(value: self.startTime, fieldNumber: 4)
    }
    if self.endTime != 0 {
      try visitor.visitSingularInt64Field(value: self.endTime, fieldNumber: 5)
    }
    if self.stepCount != 0 {
      try visitor.visitSingularInt64Field(value: self.stepCount, fieldNumber: 6)
    }
    if self.distance.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.distance, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_ActivityEvent, rhs: Chronotopia_ActivityEvent) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.stepCount != rhs.stepCount {return false}
    if lhs.distance != rhs.distance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_ActivityEvent.ActivityType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "STILL"),
    2: .same(proto: "WALKING"),
    3: .same(proto: "RUNNING"),
    4: .same(proto: "IN_VEHICLE"),
    5: .same(proto: "ON_BICYCLE"),
    6: .same(proto: "ON_FOOT"),
    7: .same(proto: "TILTING"),
  ]
}

extension Chronotopia_VisitEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisitEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .standard(proto: "horizontal_accuracy"),
    4: .standard(proto: "arrival_time"),
    5: .standard(proto: "departure_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.latitude) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.longitude) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.horizontalAccuracy) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.arrivalTime) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.departureTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    if self.horizontalAccuracy.bitPattern != 0 {
      try visitor.visitSingularDoubleField(value: self.horizontalAccuracy, fieldNumber: 3)
    }
    if self.arrivalTime != 0 {
      try visitor.visitSingularInt64Field(value: self.arrivalTime, fieldNumber: 4)
    }
    if self.departureTime != 0 {
      try visitor.visitSingularInt64Field(value: self.departureTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_VisitEvent, rhs: Chronotopia_VisitEvent) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.horizontalAccuracy != rhs.horizontalAccuracy {return false}
    if lhs.arrivalTime != rhs.arrivalTime {return false}
    if lhs.departureTime != rhs.departureTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_DeviceMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platform"),
    2: .standard(proto: "os_version"),
    3: .standard(proto: "app_version"),
    4: .standard(proto: "device_model"),
    5: .standard(proto: "device_language"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.osVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deviceModel) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.deviceLanguage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 1)
    }
    if !self.osVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.osVersion, fieldNumber: 2)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 3)
    }
    if !self.deviceModel.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModel, fieldNumber: 4)
    }
    if !self.deviceLanguage.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceLanguage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_DeviceMetadata, rhs: Chronotopia_DeviceMetadata) -> Bool {
    if lhs.platform != rhs.platform {return false}
    if lhs.osVersion != rhs.osVersion {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.deviceModel != rhs.deviceModel {return false}
    if lhs.deviceLanguage != rhs.deviceLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_IngestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngestResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .standard(proto: "alert_message"),
    3: .standard(proto: "pause_tracking"),
    4: .standard(proto: "recommended_upload_interval"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.alertMessage) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.pauseTracking) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.recommendedUploadInterval) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.alertMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.alertMessage, fieldNumber: 2)
    }
    if self.pauseTracking != false {
      try visitor.visitSingularBoolField(value: self.pauseTracking, fieldNumber: 3)
    }
    if self.recommendedUploadInterval != 0 {
      try visitor.visitSingularInt32Field(value: self.recommendedUploadInterval, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_IngestResponse, rhs: Chronotopia_IngestResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.alertMessage != rhs.alertMessage {return false}
    if lhs.pauseTracking != rhs.pauseTracking {return false}
    if lhs.recommendedUploadInterval != rhs.recommendedUploadInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
