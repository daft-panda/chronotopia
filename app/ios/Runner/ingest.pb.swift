// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ingest.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Source information for Chronotopia App
struct Chronotopia_ChronotopiaAppSource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Source information for Chronotopia Web
struct Chronotopia_ChronotopiaWebSource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var webVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Source information for Chronotopia API
struct Chronotopia_ChronotopiaAPISource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var apiVersion: String = String()

  var usedApiKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Source information for Google Maps Timeline export
struct Chronotopia_GoogleMapsTimelineSource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Source information for Apple Health export
struct Chronotopia_AppleHealthSource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Source information for external fitness apps
struct Chronotopia_FitnessAppSource: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appName: String = String()

  var appVersion: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Chronotopia_IngestBatch: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// DateTime when the packet was created
  var dateTime: Chronotopia_DateTime {
    get {return _dateTime ?? Chronotopia_DateTime()}
    set {_dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  var hasDateTime: Bool {return self._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  mutating func clearDateTime() {self._dateTime = nil}

  /// Batch of location points
  var locations: [Chronotopia_LocationPoint] = []

  /// Batch of activity events
  var activities: [Chronotopia_ActivityEvent] = []

  /// Batch of visit events
  var visits: [Chronotopia_VisitEvent] = []

  /// Source information about where this data came from
  var source: Chronotopia_IngestBatch.OneOf_Source? = nil

  var chronotopiaApp: Chronotopia_ChronotopiaAppSource {
    get {
      if case .chronotopiaApp(let v)? = source {return v}
      return Chronotopia_ChronotopiaAppSource()
    }
    set {source = .chronotopiaApp(newValue)}
  }

  var chronotopiaWeb: Chronotopia_ChronotopiaWebSource {
    get {
      if case .chronotopiaWeb(let v)? = source {return v}
      return Chronotopia_ChronotopiaWebSource()
    }
    set {source = .chronotopiaWeb(newValue)}
  }

  var chronotopiaApi: Chronotopia_ChronotopiaAPISource {
    get {
      if case .chronotopiaApi(let v)? = source {return v}
      return Chronotopia_ChronotopiaAPISource()
    }
    set {source = .chronotopiaApi(newValue)}
  }

  var googleMaps: Chronotopia_GoogleMapsTimelineSource {
    get {
      if case .googleMaps(let v)? = source {return v}
      return Chronotopia_GoogleMapsTimelineSource()
    }
    set {source = .googleMaps(newValue)}
  }

  var appleHealth: Chronotopia_AppleHealthSource {
    get {
      if case .appleHealth(let v)? = source {return v}
      return Chronotopia_AppleHealthSource()
    }
    set {source = .appleHealth(newValue)}
  }

  var fitnessApp: Chronotopia_FitnessAppSource {
    get {
      if case .fitnessApp(let v)? = source {return v}
      return Chronotopia_FitnessAppSource()
    }
    set {source = .fitnessApp(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Source information about where this data came from
  enum OneOf_Source: Equatable, Sendable {
    case chronotopiaApp(Chronotopia_ChronotopiaAppSource)
    case chronotopiaWeb(Chronotopia_ChronotopiaWebSource)
    case chronotopiaApi(Chronotopia_ChronotopiaAPISource)
    case googleMaps(Chronotopia_GoogleMapsTimelineSource)
    case appleHealth(Chronotopia_AppleHealthSource)
    case fitnessApp(Chronotopia_FitnessAppSource)

  }

  init() {}

  fileprivate var _dateTime: Chronotopia_DateTime? = nil
}

/// Location point data
struct Chronotopia_LocationPoint: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Basic coordinates
  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var altitude: Double {
    get {return _storage._altitude}
    set {_uniqueStorage()._altitude = newValue}
  }

  /// Accuracy information
  var horizontalAccuracy: Double {
    get {return _storage._horizontalAccuracy}
    set {_uniqueStorage()._horizontalAccuracy = newValue}
  }

  var verticalAccuracy: Double {
    get {return _storage._verticalAccuracy}
    set {_uniqueStorage()._verticalAccuracy = newValue}
  }

  var speedAccuracy: Double {
    get {return _storage._speedAccuracy}
    set {_uniqueStorage()._speedAccuracy = newValue}
  }

  var bearingAccuracy: Double {
    get {return _storage._bearingAccuracy}
    set {_uniqueStorage()._bearingAccuracy = newValue}
  }

  /// Motion information
  var speed: Double {
    get {return _storage._speed}
    set {_uniqueStorage()._speed = newValue}
  }

  var bearing: Double {
    get {return _storage._bearing}
    set {_uniqueStorage()._bearing = newValue}
  }

  /// Timing
  var dateTime: Chronotopia_DateTime {
    get {return _storage._dateTime ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._dateTime = newValue}
  }
  /// Returns true if `dateTime` has been explicitly set.
  var hasDateTime: Bool {return _storage._dateTime != nil}
  /// Clears the value of `dateTime`. Subsequent reads from it will return its default value.
  mutating func clearDateTime() {_uniqueStorage()._dateTime = nil}

  /// Location provider information
  var isMockLocation: Bool {
    get {return _storage._isMockLocation}
    set {_uniqueStorage()._isMockLocation = newValue}
  }

  /// For indoor positioning (iOS)
  var floorLevel: Int32 {
    get {return _storage._floorLevel ?? 0}
    set {_uniqueStorage()._floorLevel = newValue}
  }
  /// Returns true if `floorLevel` has been explicitly set.
  var hasFloorLevel: Bool {return _storage._floorLevel != nil}
  /// Clears the value of `floorLevel`. Subsequent reads from it will return its default value.
  mutating func clearFloorLevel() {_uniqueStorage()._floorLevel = nil}

  /// Device state information
  var batteryLevel: UInt32 {
    get {return _storage._batteryLevel}
    set {_uniqueStorage()._batteryLevel = newValue}
  }

  var networkType: String {
    get {return _storage._networkType ?? String()}
    set {_uniqueStorage()._networkType = newValue}
  }
  /// Returns true if `networkType` has been explicitly set.
  var hasNetworkType: Bool {return _storage._networkType != nil}
  /// Clears the value of `networkType`. Subsequent reads from it will return its default value.
  mutating func clearNetworkType() {_uniqueStorage()._networkType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Activity recognition event
struct Chronotopia_ActivityEvent: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Chronotopia_ActivityEvent.ActivityType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// 0-100
  var confidence: Int32 {
    get {return _storage._confidence}
    set {_uniqueStorage()._confidence = newValue}
  }

  /// Timestamps
  var start: Chronotopia_DateTime {
    get {return _storage._start ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {_uniqueStorage()._start = nil}

  var end: Chronotopia_DateTime {
    get {return _storage._end ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {_uniqueStorage()._end = nil}

  /// Movement data
  var stepCount: Int64 {
    get {return _storage._stepCount ?? 0}
    set {_uniqueStorage()._stepCount = newValue}
  }
  /// Returns true if `stepCount` has been explicitly set.
  var hasStepCount: Bool {return _storage._stepCount != nil}
  /// Clears the value of `stepCount`. Subsequent reads from it will return its default value.
  mutating func clearStepCount() {_uniqueStorage()._stepCount = nil}

  var distance: Double {
    get {return _storage._distance ?? 0}
    set {_uniqueStorage()._distance = newValue}
  }
  /// Returns true if `distance` has been explicitly set.
  var hasDistance: Bool {return _storage._distance != nil}
  /// Clears the value of `distance`. Subsequent reads from it will return its default value.
  mutating func clearDistance() {_uniqueStorage()._distance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ActivityType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case still // = 1
    case walking // = 2
    case running // = 3
    case inVehicle // = 4
    case onBicycle // = 5
    case onFoot // = 6
    case tilting // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .still
      case 2: self = .walking
      case 3: self = .running
      case 4: self = .inVehicle
      case 5: self = .onBicycle
      case 6: self = .onFoot
      case 7: self = .tilting
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .still: return 1
      case .walking: return 2
      case .running: return 3
      case .inVehicle: return 4
      case .onBicycle: return 5
      case .onFoot: return 6
      case .tilting: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Chronotopia_ActivityEvent.ActivityType] = [
      .unknown,
      .still,
      .walking,
      .running,
      .inVehicle,
      .onBicycle,
      .onFoot,
      .tilting,
    ]

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Visit events (iOS-specific but we'll handle on Android too)
struct Chronotopia_VisitEvent: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitude: Double {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: Double {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var horizontalAccuracy: Double {
    get {return _storage._horizontalAccuracy}
    set {_uniqueStorage()._horizontalAccuracy = newValue}
  }

  var arrival: Chronotopia_DateTime {
    get {return _storage._arrival ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._arrival = newValue}
  }
  /// Returns true if `arrival` has been explicitly set.
  var hasArrival: Bool {return _storage._arrival != nil}
  /// Clears the value of `arrival`. Subsequent reads from it will return its default value.
  mutating func clearArrival() {_uniqueStorage()._arrival = nil}

  var departure: Chronotopia_DateTime {
    get {return _storage._departure ?? Chronotopia_DateTime()}
    set {_uniqueStorage()._departure = newValue}
  }
  /// Returns true if `departure` has been explicitly set.
  var hasDeparture: Bool {return _storage._departure != nil}
  /// Clears the value of `departure`. Subsequent reads from it will return its default value.
  mutating func clearDeparture() {_uniqueStorage()._departure = nil}

  /// Semantic information
  var canonicalLabel: String {
    get {return _storage._canonicalLabel}
    set {_uniqueStorage()._canonicalLabel = newValue}
  }

  /// External place identifier
  var externalPlaceID: String {
    get {return _storage._externalPlaceID ?? String()}
    set {_uniqueStorage()._externalPlaceID = newValue}
  }
  /// Returns true if `externalPlaceID` has been explicitly set.
  var hasExternalPlaceID: Bool {return _storage._externalPlaceID != nil}
  /// Clears the value of `externalPlaceID`. Subsequent reads from it will return its default value.
  mutating func clearExternalPlaceID() {_uniqueStorage()._externalPlaceID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Device metadata
struct Chronotopia_DeviceMetadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// "android" or "ios"
  var platform: String = String()

  var osVersion: String = String()

  var appVersion: String = String()

  var deviceModel: String = String()

  var deviceLanguage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Google Maps Timeline Export data
struct Chronotopia_GoogleMapsTimelineExport: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Raw JSON content of the Google Maps Timeline export
  var jsonContent: String = String()

  /// Optional user-provided metadata
  var exportName: String = String()

  var exportDate: Chronotopia_DateTime {
    get {return _exportDate ?? Chronotopia_DateTime()}
    set {_exportDate = newValue}
  }
  /// Returns true if `exportDate` has been explicitly set.
  var hasExportDate: Bool {return self._exportDate != nil}
  /// Clears the value of `exportDate`. Subsequent reads from it will return its default value.
  mutating func clearExportDate() {self._exportDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exportDate: Chronotopia_DateTime? = nil
}

/// Response to data uploads
struct Chronotopia_IngestResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var alertMessage: String = String()

  /// Optional fields for server instructions
  var pauseTracking: Bool = false

  /// in seconds
  var recommendedUploadInterval: Int32 = 0

  /// Processing statistics for timeline exports
  var processedLocations: Int32 {
    get {return _processedLocations ?? 0}
    set {_processedLocations = newValue}
  }
  /// Returns true if `processedLocations` has been explicitly set.
  var hasProcessedLocations: Bool {return self._processedLocations != nil}
  /// Clears the value of `processedLocations`. Subsequent reads from it will return its default value.
  mutating func clearProcessedLocations() {self._processedLocations = nil}

  var processedActivities: Int32 {
    get {return _processedActivities ?? 0}
    set {_processedActivities = newValue}
  }
  /// Returns true if `processedActivities` has been explicitly set.
  var hasProcessedActivities: Bool {return self._processedActivities != nil}
  /// Clears the value of `processedActivities`. Subsequent reads from it will return its default value.
  mutating func clearProcessedActivities() {self._processedActivities = nil}

  var processedVisits: Int32 {
    get {return _processedVisits ?? 0}
    set {_processedVisits = newValue}
  }
  /// Returns true if `processedVisits` has been explicitly set.
  var hasProcessedVisits: Bool {return self._processedVisits != nil}
  /// Clears the value of `processedVisits`. Subsequent reads from it will return its default value.
  mutating func clearProcessedVisits() {self._processedVisits = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _processedLocations: Int32? = nil
  fileprivate var _processedActivities: Int32? = nil
  fileprivate var _processedVisits: Int32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "chronotopia"

extension Chronotopia_ChronotopiaAppSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChronotopiaAppSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_ChronotopiaAppSource, rhs: Chronotopia_ChronotopiaAppSource) -> Bool {
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_ChronotopiaWebSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChronotopiaWebSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "web_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.webVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.webVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.webVersion, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_ChronotopiaWebSource, rhs: Chronotopia_ChronotopiaWebSource) -> Bool {
    if lhs.webVersion != rhs.webVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_ChronotopiaAPISource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChronotopiaAPISource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_version"),
    2: .standard(proto: "used_api_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.apiVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.usedApiKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apiVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.apiVersion, fieldNumber: 1)
    }
    if !self.usedApiKey.isEmpty {
      try visitor.visitSingularStringField(value: self.usedApiKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_ChronotopiaAPISource, rhs: Chronotopia_ChronotopiaAPISource) -> Bool {
    if lhs.apiVersion != rhs.apiVersion {return false}
    if lhs.usedApiKey != rhs.usedApiKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_GoogleMapsTimelineSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoogleMapsTimelineSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_GoogleMapsTimelineSource, rhs: Chronotopia_GoogleMapsTimelineSource) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_AppleHealthSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppleHealthSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_AppleHealthSource, rhs: Chronotopia_AppleHealthSource) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_FitnessAppSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FitnessAppSource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_name"),
    2: .standard(proto: "app_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 1)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_FitnessAppSource, rhs: Chronotopia_FitnessAppSource) -> Bool {
    if lhs.appName != rhs.appName {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_IngestBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngestBatch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "dateTime"),
    4: .same(proto: "locations"),
    5: .same(proto: "activities"),
    6: .same(proto: "visits"),
    7: .standard(proto: "chronotopia_app"),
    8: .standard(proto: "chronotopia_web"),
    9: .standard(proto: "chronotopia_api"),
    10: .standard(proto: "google_maps"),
    11: .standard(proto: "apple_health"),
    12: .standard(proto: "fitness_app"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularMessageField(value: &self._dateTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.locations) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.activities) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.visits) }()
      case 7: try {
        var v: Chronotopia_ChronotopiaAppSource?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .chronotopiaApp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .chronotopiaApp(v)
        }
      }()
      case 8: try {
        var v: Chronotopia_ChronotopiaWebSource?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .chronotopiaWeb(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .chronotopiaWeb(v)
        }
      }()
      case 9: try {
        var v: Chronotopia_ChronotopiaAPISource?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .chronotopiaApi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .chronotopiaApi(v)
        }
      }()
      case 10: try {
        var v: Chronotopia_GoogleMapsTimelineSource?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .googleMaps(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .googleMaps(v)
        }
      }()
      case 11: try {
        var v: Chronotopia_AppleHealthSource?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .appleHealth(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .appleHealth(v)
        }
      }()
      case 12: try {
        var v: Chronotopia_FitnessAppSource?
        var hadOneofValue = false
        if let current = self.source {
          hadOneofValue = true
          if case .fitnessApp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.source = .fitnessApp(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 4)
    }
    if !self.activities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activities, fieldNumber: 5)
    }
    if !self.visits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.visits, fieldNumber: 6)
    }
    switch self.source {
    case .chronotopiaApp?: try {
      guard case .chronotopiaApp(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .chronotopiaWeb?: try {
      guard case .chronotopiaWeb(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .chronotopiaApi?: try {
      guard case .chronotopiaApi(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .googleMaps?: try {
      guard case .googleMaps(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .appleHealth?: try {
      guard case .appleHealth(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .fitnessApp?: try {
      guard case .fitnessApp(let v)? = self.source else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_IngestBatch, rhs: Chronotopia_IngestBatch) -> Bool {
    if lhs._dateTime != rhs._dateTime {return false}
    if lhs.locations != rhs.locations {return false}
    if lhs.activities != rhs.activities {return false}
    if lhs.visits != rhs.visits {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_LocationPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocationPoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .same(proto: "altitude"),
    4: .standard(proto: "horizontal_accuracy"),
    5: .standard(proto: "vertical_accuracy"),
    6: .standard(proto: "speed_accuracy"),
    7: .standard(proto: "bearing_accuracy"),
    8: .same(proto: "speed"),
    9: .same(proto: "bearing"),
    10: .same(proto: "dateTime"),
    11: .standard(proto: "is_mock_location"),
    12: .standard(proto: "floor_level"),
    13: .standard(proto: "battery_level"),
    14: .standard(proto: "network_type"),
  ]

  fileprivate class _StorageClass {
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _altitude: Double = 0
    var _horizontalAccuracy: Double = 0
    var _verticalAccuracy: Double = 0
    var _speedAccuracy: Double = 0
    var _bearingAccuracy: Double = 0
    var _speed: Double = 0
    var _bearing: Double = 0
    var _dateTime: Chronotopia_DateTime? = nil
    var _isMockLocation: Bool = false
    var _floorLevel: Int32? = nil
    var _batteryLevel: UInt32 = 0
    var _networkType: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _latitude = source._latitude
      _longitude = source._longitude
      _altitude = source._altitude
      _horizontalAccuracy = source._horizontalAccuracy
      _verticalAccuracy = source._verticalAccuracy
      _speedAccuracy = source._speedAccuracy
      _bearingAccuracy = source._bearingAccuracy
      _speed = source._speed
      _bearing = source._bearing
      _dateTime = source._dateTime
      _isMockLocation = source._isMockLocation
      _floorLevel = source._floorLevel
      _batteryLevel = source._batteryLevel
      _networkType = source._networkType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._latitude) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._longitude) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._altitude) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._horizontalAccuracy) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._verticalAccuracy) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._speedAccuracy) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._bearingAccuracy) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._speed) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._bearing) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._dateTime) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._isMockLocation) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._floorLevel) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._batteryLevel) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._networkType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._latitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 1)
      }
      if _storage._longitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 2)
      }
      if _storage._altitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._altitude, fieldNumber: 3)
      }
      if _storage._horizontalAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._horizontalAccuracy, fieldNumber: 4)
      }
      if _storage._verticalAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._verticalAccuracy, fieldNumber: 5)
      }
      if _storage._speedAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._speedAccuracy, fieldNumber: 6)
      }
      if _storage._bearingAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearingAccuracy, fieldNumber: 7)
      }
      if _storage._speed.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._speed, fieldNumber: 8)
      }
      if _storage._bearing.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearing, fieldNumber: 9)
      }
      try { if let v = _storage._dateTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if _storage._isMockLocation != false {
        try visitor.visitSingularBoolField(value: _storage._isMockLocation, fieldNumber: 11)
      }
      try { if let v = _storage._floorLevel {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      } }()
      if _storage._batteryLevel != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._batteryLevel, fieldNumber: 13)
      }
      try { if let v = _storage._networkType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_LocationPoint, rhs: Chronotopia_LocationPoint) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._altitude != rhs_storage._altitude {return false}
        if _storage._horizontalAccuracy != rhs_storage._horizontalAccuracy {return false}
        if _storage._verticalAccuracy != rhs_storage._verticalAccuracy {return false}
        if _storage._speedAccuracy != rhs_storage._speedAccuracy {return false}
        if _storage._bearingAccuracy != rhs_storage._bearingAccuracy {return false}
        if _storage._speed != rhs_storage._speed {return false}
        if _storage._bearing != rhs_storage._bearing {return false}
        if _storage._dateTime != rhs_storage._dateTime {return false}
        if _storage._isMockLocation != rhs_storage._isMockLocation {return false}
        if _storage._floorLevel != rhs_storage._floorLevel {return false}
        if _storage._batteryLevel != rhs_storage._batteryLevel {return false}
        if _storage._networkType != rhs_storage._networkType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_ActivityEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivityEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "confidence"),
    3: .same(proto: "start"),
    4: .same(proto: "end"),
    5: .standard(proto: "step_count"),
    6: .same(proto: "distance"),
  ]

  fileprivate class _StorageClass {
    var _type: Chronotopia_ActivityEvent.ActivityType = .unknown
    var _confidence: Int32 = 0
    var _start: Chronotopia_DateTime? = nil
    var _end: Chronotopia_DateTime? = nil
    var _stepCount: Int64? = nil
    var _distance: Double? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _confidence = source._confidence
      _start = source._start
      _end = source._end
      _stepCount = source._stepCount
      _distance = source._distance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._confidence) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._start) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._end) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._stepCount) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._distance) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if _storage._confidence != 0 {
        try visitor.visitSingularInt32Field(value: _storage._confidence, fieldNumber: 2)
      }
      try { if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._stepCount {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._distance {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_ActivityEvent, rhs: Chronotopia_ActivityEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._confidence != rhs_storage._confidence {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._stepCount != rhs_storage._stepCount {return false}
        if _storage._distance != rhs_storage._distance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_ActivityEvent.ActivityType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "STILL"),
    2: .same(proto: "WALKING"),
    3: .same(proto: "RUNNING"),
    4: .same(proto: "IN_VEHICLE"),
    5: .same(proto: "ON_BICYCLE"),
    6: .same(proto: "ON_FOOT"),
    7: .same(proto: "TILTING"),
  ]
}

extension Chronotopia_VisitEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisitEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .standard(proto: "horizontal_accuracy"),
    4: .same(proto: "arrival"),
    5: .same(proto: "departure"),
    6: .standard(proto: "canonical_label"),
    8: .standard(proto: "external_place_id"),
  ]

  fileprivate class _StorageClass {
    var _latitude: Double = 0
    var _longitude: Double = 0
    var _horizontalAccuracy: Double = 0
    var _arrival: Chronotopia_DateTime? = nil
    var _departure: Chronotopia_DateTime? = nil
    var _canonicalLabel: String = String()
    var _externalPlaceID: String? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _latitude = source._latitude
      _longitude = source._longitude
      _horizontalAccuracy = source._horizontalAccuracy
      _arrival = source._arrival
      _departure = source._departure
      _canonicalLabel = source._canonicalLabel
      _externalPlaceID = source._externalPlaceID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._latitude) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._longitude) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._horizontalAccuracy) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._arrival) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._departure) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._canonicalLabel) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._externalPlaceID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._latitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._latitude, fieldNumber: 1)
      }
      if _storage._longitude.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._longitude, fieldNumber: 2)
      }
      if _storage._horizontalAccuracy.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._horizontalAccuracy, fieldNumber: 3)
      }
      try { if let v = _storage._arrival {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._departure {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._canonicalLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._canonicalLabel, fieldNumber: 6)
      }
      try { if let v = _storage._externalPlaceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_VisitEvent, rhs: Chronotopia_VisitEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._horizontalAccuracy != rhs_storage._horizontalAccuracy {return false}
        if _storage._arrival != rhs_storage._arrival {return false}
        if _storage._departure != rhs_storage._departure {return false}
        if _storage._canonicalLabel != rhs_storage._canonicalLabel {return false}
        if _storage._externalPlaceID != rhs_storage._externalPlaceID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_DeviceMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platform"),
    2: .standard(proto: "os_version"),
    3: .standard(proto: "app_version"),
    4: .standard(proto: "device_model"),
    5: .standard(proto: "device_language"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.platform) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.osVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.deviceModel) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.deviceLanguage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platform.isEmpty {
      try visitor.visitSingularStringField(value: self.platform, fieldNumber: 1)
    }
    if !self.osVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.osVersion, fieldNumber: 2)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 3)
    }
    if !self.deviceModel.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceModel, fieldNumber: 4)
    }
    if !self.deviceLanguage.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceLanguage, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_DeviceMetadata, rhs: Chronotopia_DeviceMetadata) -> Bool {
    if lhs.platform != rhs.platform {return false}
    if lhs.osVersion != rhs.osVersion {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.deviceModel != rhs.deviceModel {return false}
    if lhs.deviceLanguage != rhs.deviceLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_GoogleMapsTimelineExport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GoogleMapsTimelineExport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "json_content"),
    2: .standard(proto: "export_name"),
    3: .standard(proto: "export_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.jsonContent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.exportName) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._exportDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.jsonContent.isEmpty {
      try visitor.visitSingularStringField(value: self.jsonContent, fieldNumber: 1)
    }
    if !self.exportName.isEmpty {
      try visitor.visitSingularStringField(value: self.exportName, fieldNumber: 2)
    }
    try { if let v = self._exportDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_GoogleMapsTimelineExport, rhs: Chronotopia_GoogleMapsTimelineExport) -> Bool {
    if lhs.jsonContent != rhs.jsonContent {return false}
    if lhs.exportName != rhs.exportName {return false}
    if lhs._exportDate != rhs._exportDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Chronotopia_IngestResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IngestResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .standard(proto: "alert_message"),
    3: .standard(proto: "pause_tracking"),
    4: .standard(proto: "recommended_upload_interval"),
    5: .standard(proto: "processed_locations"),
    6: .standard(proto: "processed_activities"),
    7: .standard(proto: "processed_visits"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.alertMessage) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.pauseTracking) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.recommendedUploadInterval) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._processedLocations) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._processedActivities) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._processedVisits) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.alertMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.alertMessage, fieldNumber: 2)
    }
    if self.pauseTracking != false {
      try visitor.visitSingularBoolField(value: self.pauseTracking, fieldNumber: 3)
    }
    if self.recommendedUploadInterval != 0 {
      try visitor.visitSingularInt32Field(value: self.recommendedUploadInterval, fieldNumber: 4)
    }
    try { if let v = self._processedLocations {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._processedActivities {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._processedVisits {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Chronotopia_IngestResponse, rhs: Chronotopia_IngestResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.alertMessage != rhs.alertMessage {return false}
    if lhs.pauseTracking != rhs.pauseTracking {return false}
    if lhs.recommendedUploadInterval != rhs.recommendedUploadInterval {return false}
    if lhs._processedLocations != rhs._processedLocations {return false}
    if lhs._processedActivities != rhs._processedActivities {return false}
    if lhs._processedVisits != rhs._processedVisits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
