syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

package chronotopia;

service Chronotopia {
    rpc GetTrips(RequestParameters) returns (Trips);
    rpc GetRouteMatchTrace(google.protobuf.Empty) returns (RouteMatchTrace);
    rpc OSMNetworkAroundPoint(LatLon) returns (google.protobuf.StringValue);
}

message RequestParameters {
    optional google.protobuf.Timestamp from = 1;
    optional google.protobuf.Timestamp to = 2;
    optional uint32 h3 = 3;
}

message LatLon {
    double lat = 1;
    double lon = 2;
}

message Point {
    LatLon latlon = 1;
    google.protobuf.Timestamp timestamp = 3;
    optional string label = 4;
    optional string note = 5;
    optional float elevation = 6;
}

message Trip {
    repeated Point points = 1;
    google.protobuf.Timestamp start = 2;
    google.protobuf.Timestamp stop = 3;
    optional string label = 10;
}

message Trips {
    repeated Trip trips = 1;
}

message RoadSegment {
    uint64 id = 1;
    repeated LatLon coordinates = 2;
    bool is_oneway = 3;
    string highway_type = 4;
    repeated uint64 connections = 5;
    optional string name = 6;
}

message WindowTrace {
    uint32 start = 1;
    uint32 end = 2;
    repeated RoadSegment segments = 3;
    bool bridge = 4;
}

message RouteMatchTrace {
    Trip trip = 1;
    repeated WindowTrace windowTraces = 2;
    repeated google.protobuf.StringValue pointCandidates = 3;
}
