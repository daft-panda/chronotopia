syntax = "proto3";
import "common.proto";

package chronotopia;

service Ingest {
    rpc SubmitBatch (IngestBatch) returns (IngestResponse);
    rpc SubmitDeviceMetadata (DeviceMetadata) returns (IngestResponse);
    rpc SubmitGoogleMapsTimelineExport (GoogleMapsTimelineExport) returns (IngestResponse);
}

// Source information for Chronotopia App
message ChronotopiaAppSource {
    string app_version = 1;
}

// Source information for Chronotopia Web
message ChronotopiaWebSource {
    string web_version = 1;
}

// Source information for Chronotopia API
message ChronotopiaAPISource {
    string api_version = 1;
    string used_api_key = 2;
}

// Source information for Google Maps Timeline export
message GoogleMapsTimelineSource {
    string version = 1;
}

// Source information for Apple Health export
message AppleHealthSource {
    string version = 1;
}

// Source information for external fitness apps
message FitnessAppSource {
    string app_name = 1;
    string app_version = 2;
}

message IngestBatch {  
  // DateTime when the packet was created
  DateTime dateTime = 3;
  
  // Batch of location points
  repeated LocationPoint locations = 4;
  
  // Batch of activity events
  repeated ActivityEvent activities = 5;
  
  // Batch of visit events
  repeated VisitEvent visits = 6;
  
  // Source information about where this data came from
  oneof source {
    ChronotopiaAppSource chronotopia_app = 7;
    ChronotopiaWebSource chronotopia_web = 8;
    ChronotopiaAPISource chronotopia_api = 9;
    GoogleMapsTimelineSource google_maps = 10;
    AppleHealthSource apple_health = 11;
    FitnessAppSource fitness_app = 12;
  }
}

// Location point data
message LocationPoint {
  // Basic coordinates
  double latitude = 1;
  double longitude = 2;
  double altitude = 3;
  
  // Accuracy information
  double horizontal_accuracy = 4;
  double vertical_accuracy = 5;
  double speed_accuracy = 6;
  double bearing_accuracy = 7;
  
  // Motion information
  double speed = 8;
  double bearing = 9;
  
  // Timing
  DateTime dateTime = 10;
  
  // Location provider information
  bool is_mock_location = 11;
  
  // For indoor positioning (iOS)
  optional int32 floor_level = 12;
  
  // Device state information
  uint32 battery_level = 13;
  optional string network_type = 14;
}

// Activity recognition event
message ActivityEvent {
  enum ActivityType {
    UNKNOWN = 0;
    STILL = 1;
    WALKING = 2;
    RUNNING = 3;
    IN_VEHICLE = 4;
    ON_BICYCLE = 5;
    ON_FOOT = 6;
    TILTING = 7;
  }
  
  ActivityType type = 1;
  int32 confidence = 2;  // 0-100
  
  // Timestamps
  DateTime start = 3;
  optional DateTime end = 4;
  
  // Movement data
  optional int64 step_count = 5;
  optional double distance = 6;
}

// Visit events (iOS-specific but we'll handle on Android too)
message VisitEvent {
  double latitude = 1;
  double longitude = 2;
  double horizontal_accuracy = 3;
  
  DateTime arrival = 4;
  DateTime departure = 5;
  
  // Semantic information
  string canonical_label = 6;  // e.g., "home", "work", "restaurant"
  
  // External place identifier
  optional string external_place_id = 8;
}

// Device metadata
message DeviceMetadata {
  string platform = 1;  // "android" or "ios"
  string os_version = 2;
  string app_version = 3;
  string device_model = 4;
  string device_language = 5;
}

// Google Maps Timeline Export data
message GoogleMapsTimelineExport {
  // Raw JSON content of the Google Maps Timeline export
  string json_content = 1;
  
  // Optional user-provided metadata
  string export_name = 2;
  optional DateTime export_date = 3;
}

// Response to data uploads
message IngestResponse {
  bool success = 1;
  string alert_message = 2;
  
  // Optional fields for server instructions
  bool pause_tracking = 3;
  int32 recommended_upload_interval = 4;  // in seconds
  
  // Processing statistics for timeline exports
  optional int32 processed_locations = 5;
  optional int32 processed_activities = 6;
  optional int32 processed_visits = 7;
}